go.property("health", 10)

---------------------------------
-- Health points adjust
---------------------------------
local function adjustHeath(self, hp)

	self.health = self.health + hp
	if self.health < 0 then self.health = 0 end
	if self.health > self.max_hp then self.health = self.max_hp end

	go.animate("#health", "health", go.PLAYBACK_ONCE_FORWARD, vmath.vector4((self.health * self.hp_unit), 0, 0, 0), go.EASING_OUTSINE, 0.5)
end


---------------------------------
-- 
---------------------------------
function init(self)

	msg.post(".", "acquire_input_focus")

	-- Comparison
	self.max_hp = self.health
	
	-- Width of the sprite to scale using hp_units
	self.width = go.get("#health", "size.x")	
	-- Units for add / sub
	self.hp_unit = (self.width / self.health) -- WIDTH / HP (IE: 200 / 50 = 4 units)

	--
	self.pos = go.get_position()
	--
	--go.set("#health", "value", self.health)
	go.set("#health", "health", vmath.vector4(self.health * self.hp_unit))
end


---------------------------------
-- 
---------------------------------
function fixed_update(self, dt)

	go.set_position(self.pos)

	-- Constant update of the world position for the health bar
	-- Subtract Half of sprite's width to get the position value at the start of the sprite
	go.set("#health", "bar_pos", vmath.vector4(self.pos.x - (self.width * 0.5), self.pos.y, self.pos.z, 0))
end


---------------------------------
-- 
---------------------------------
function on_input(self, action_id, action)

	if action_id == hash("m_right") and action.released then
		adjustHeath(self, self.hp_unit * 4)
	elseif action_id == hash("m_left") and action.released then
		adjustHeath(self, -self.hp_unit * 4)
	elseif action_id == hash("left") then
		self.pos.x = self.pos.x - 4
	elseif action_id == hash("right") then
		self.pos.x = self.pos.x + 4
	elseif action_id == hash("up") then
		self.health = self.health + self.hp_unit
		self.health = math.min(self.health, self.max_hp)
		-- Update
		go.set("#health", "health", vmath.vector4(self.health * self.hp_unit))
	elseif action_id == hash("down") then
		self.health = self.health - self.hp_unit
		self.health = math.max(self.health, 0)
		-- Update
		go.set("#health", "health", vmath.vector4(self.health * self.hp_unit))
	end

	--print("HP:", self.health, " Sprite POS:", self.pos, " Sprite World Pos:", (self.pos.x - self.width))
	label.set_text("/button#label1", "HP: " .. self.health )
end

---------------------------------
-- 
---------------------------------
function final(self)
	msg.post(".", "release_input_focus")
	go.delete()
end
